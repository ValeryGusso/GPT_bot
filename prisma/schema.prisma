generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  chatId    Int       @unique
  name      String
  isAdmin   Boolean   @default(false)
  isBanned  Boolean   @default(false)
  activity  Activity?
  settings  Settings?
  context   Context?
  token     Token?
  createtAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([id, chatId])
}

model Activity {
  id         Int      @id @default(autoincrement())
  usage      Int      @default(0)
  dailyUsage Int      @default(0)
  expiresIn  DateTime @default(dbgenerated("NOW() + interval '1 month'"))
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int      @unique
  tarif      Tarif    @relation(fields: [tarifId], references: [id], onDelete: Cascade)
  tarifId    Int      @unique
  createtAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Settings {
  id          Int      @id @default(autoincrement())
  temperature Float    @default(0.7)
  topP        Float    @default(0.7)
  randomModel String   @default("gpt-3.5-turbo")
  language    Language
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int      @unique
  createtAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Context {
  id          Int       @id @default(autoincrement())
  useContext  Boolean   @default(false)
  value       Message[]
  length      Int       @default(10) @db.SmallInt
  serviceInfo String    @default("")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int       @unique
  createtAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Message {
  id        Int         @id @default(autoincrement())
  role      MessageRole
  content   String
  context   Context?    @relation(fields: [contextId], references: [id], onDelete: Cascade)
  contextId Int?
  createtAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Token {
  id        Int      @id @default(autoincrement())
  token     String   @unique @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @unique
  createtAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, token])
}

model Tarif {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  title       String     @unique
  description String
  image       String
  limit       Int
  dailyLimit  Int
  maxContext  Int        @db.SmallInt
  duration    Int        @default(2592000000)
  type        TarifType
  price       Price[]
  code        Code[]
  activity    Activity[]
  createtAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([id, name, title])
}

model Code {
  id        Int      @id @default(autoincrement())
  value     String   @unique
  limit     Int      @db.SmallInt
  expiresIn DateTime @default(dbgenerated("NOW() + interval '1 month'"))
  Tarif     Tarif?   @relation(fields: [tarifId], references: [id])
  tarifId   Int?
  createtAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, value])
}

model Price {
  id        Int      @id @default(autoincrement())
  value     Int
  currency  Currency
  tarif     Tarif?   @relation(fields: [tarifId], references: [id], onDelete: Cascade)
  tarifId   Int?
  createtAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, tarifId])
}

enum MessageRole {
  user
  assistant
}

enum Currency {
  rub
  usd
  btc
  eth
  usdt
}

enum TarifType {
  limit
  subscribe
}

enum Language {
  ru
  en
}
