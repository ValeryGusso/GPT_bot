import TelegramBot, { InlineKeyboardButton, InlineKeyboardMarkup } from 'node-telegram-bot-api'
import GPTService from '../services/gpt.js'
import DBService from './db.js'
import CacheService from './cache.js'
import TextService from './text.js'
import { IRandomModel } from '../interfaces/tg.js'
import { Currency, Language, MessageRole, RandomModels, TarifType } from '@prisma/client'
import { timestampToDate, validateMarkdown } from '../const/utils.js'
import { commandsList, FAQ } from '../const/text.js'
import { day, month, year } from '../const/const.js'

class TgService {
  private readonly bot

  constructor() {
    this.bot = new TelegramBot(process.env.TG_TOKEN!, { polling: true })
  }

  /* BUTTONS */
  private readonly tarifsButton: InlineKeyboardButton = { text: '–¢–∞—Ä–∏—Ñ—ã üí≥', callback_data: 'show_tarifs' }
  private readonly aboutButton: InlineKeyboardButton = { text: '–û –±–æ—Ç–µ ‚ÑπÔ∏è', callback_data: 'show_about' }
  private readonly settingsButton: InlineKeyboardButton = { text: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è', callback_data: `show_settings` }
  private readonly menuButton: InlineKeyboardButton = { text: '–ú–µ–Ω—é üìã', callback_data: `show_menu` }
  private readonly menuAndsettingSButtons: InlineKeyboardButton[] = [this.menuButton, this.settingsButton]
  private readonly contactMeButton: InlineKeyboardButton[] = [{ text: '–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π', url: 'https://t.me/gusso' }]
  private readonly FAQButton: InlineKeyboardButton = { text: 'F.A.Q ‚ùì', callback_data: 'show_info' }
  private readonly chatButton: InlineKeyboardButton[] = [
    {
      text: '–ù–∞—á–∞—Ç—å —á–∞—Ç! ‚úâÔ∏è',
      callback_data: 'back_to_chat',
    },
  ]
  private contextButton(userId: number): InlineKeyboardButton[] {
    return [
      { text: '–°–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç üîÑ', callback_data: 'context_reset' },
      { text: '–û—Ç–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç', callback_data: `toggle_context_${userId}_off` },
    ]
  }
  private async getTarifButtons(prefix: string) {
    const tarifs = await DBService.getAllTarifs()

    const buttons: InlineKeyboardButton[][] = []
    let row = 0

    tarifs.forEach((tarif) => {
      const index = Math.floor(row / 5)

      if (!Array.isArray(buttons[index])) {
        buttons[index] = []
      }

      buttons[index].push({
        text: tarif.name,
        callback_data: prefix + tarif.name + '_' + tarif.id,
      })

      row++
    })

    return buttons
  }
  private async getPriceButtons(prefix: string, tarifId: number) {
    const pricess = await DBService.getAllPrices(tarifId)

    const buttons: InlineKeyboardButton[][] = []
    let row = 0

    pricess.forEach((price) => {
      const index = Math.floor(row / 5)

      if (!Array.isArray(buttons[index])) {
        buttons[index] = []
      }

      buttons[index].push({
        text: `${price.value} ${price.currency}`,
        callback_data: prefix + '_' + price.id,
      })

      row++
    })

    return buttons
  }

  /* UTILS */
  getBot() {
    return this.bot
  }

  async sendMessage(chatId: number, message: string, isStartChat?: boolean) {
    const user = await DBService.getByChatId(chatId)

    const inline_keyboard = [this.menuAndsettingSButtons]

    const contextButtons: InlineKeyboardButton[] = user.context?.useContext
      ? this.contextButton(user.id)
      : [{ text: '–í–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç', callback_data: `toggle_context_${user.id}_on` }]

    if (isStartChat) {
      inline_keyboard.unshift(contextButtons)
    }

    this.bot.sendMessage(chatId, message, {
      reply_markup: { inline_keyboard },
    })
  }

  async welcome(chatId: number) {
    this.bot.sendMessage(
      chatId,
      '–î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start –∏–ª–∏ –∂–µ –Ω–∞–∂–º–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É!',
      {
        reply_markup: {
          inline_keyboard: [[this.FAQButton], [{ text: '–ù–∞—á–∞—Ç—å! üöÄ', callback_data: 'reg_start' }]],
        },
      },
    )
  }

  async sendCommandsList(chatId: number) {
    let header = '–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–º–∞–Ω–¥:\n'
    const footer = '\n–ò–ª–∏, —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω–æ –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–∫–∏.'
    this.bot.sendMessage(chatId, header + commandsList + footer, {
      reply_markup: {
        inline_keyboard: [this.menuAndsettingSButtons, this.chatButton],
      },
    })
  }

  async editButton(chatId: number, messageId: number, query: string, replacer: string, marcup: InlineKeyboardMarkup) {
    const newMarkup: InlineKeyboardMarkup = {
      inline_keyboard: [],
    }

    marcup?.inline_keyboard.forEach((row, rowIndex) =>
      row.forEach((el) => {
        if (!Array.isArray(newMarkup.inline_keyboard[rowIndex])) {
          newMarkup.inline_keyboard[rowIndex] = []
        }
        const newButton: InlineKeyboardButton = {
          text: query === el.callback_data ? replacer + el.text : el.text,
          callback_data: 'edit',
        }
        newMarkup.inline_keyboard[rowIndex].push(newButton)
      }),
    )

    await this.bot.editMessageReplyMarkup(newMarkup, { chat_id: chatId, message_id: messageId })
  }

  sendTyping(chatId: number) {
    let isOver = false
    let timer: ReturnType<typeof setTimeout> | null = null

    const typing = () => {
      this.bot.sendChatAction(chatId, 'typing')
      if (timer) {
        clearTimeout(timer)
      }
      timer = setTimeout(() => {
        if (!isOver) {
          typing()
        }
      }, 2000)
    }

    typing()

    return () => {
      isOver = true
    }
  }

  /* MENU */
  async sendMenu(chatId: number) {
    const user = await DBService.getByChatId(chatId)
    const inline_keyboard: InlineKeyboardButton[][] = [[this.FAQButton]]

    if (user) {
      inline_keyboard[0].push(this.aboutButton)
      inline_keyboard.push([this.settingsButton], this.chatButton)
    } else {
      inline_keyboard.push([{ text: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è! üöÄ', callback_data: 'reg_start' }])
    }

    await this.bot.sendMessage(chatId, '–ú–µ–Ω—é', {
      reply_markup: {
        inline_keyboard,
        remove_keyboard: true,
      },
    })
  }

  async sendAbout(chatId: number) {
    this.bot.sendMessage(chatId, TextService.about('ru'), {
      reply_markup: {
        inline_keyboard: [[this.menuButton, this.FAQButton], this.contactMeButton],
      },
    })
  }

  async sendInfo(chatId: number) {
    this.bot.sendMessage(chatId, FAQ, {
      parse_mode: validateMarkdown(FAQ) ? 'Markdown' : undefined,
      reply_markup: {
        inline_keyboard: [[this.menuButton]],
      },
    })
  }

  /* START AND REGISTRATION */
  async start(chatId: number, error?: string) {
    const info = CacheService.getReg(chatId)
    switch (info.step) {
      case 1:
        this.bot.sendMessage(
          chatId,
          error
            ? error
            : '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ GPT –±–æ—Ç–µ! \n–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å —è–∑—ã–∫–æ–º. –í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—ã–π –¥–ª—è —Ç–µ–±—è (—Ç—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —Å–º–æ–∂–µ—à—å —Å–º–µ–Ω–∏—Ç—å –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)',
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: '–†—É—Å—Å–∫–∏–π', callback_data: 'reg_lang_ru' }],
                [{ text: 'English', callback_data: 'reg_lang_en' }],
              ],
            },
          },
        )
        break

      case 2:
        this.bot.sendMessage(
          chatId,
          `–ê —Ç–µ–ø–µ—Ä—å –Ω–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, –º–æ–≥—É –ª–∏ —è –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ç–µ–±–µ ${info.name}? –ù–∞–∂–º–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∏–ª–∏ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –¥—Ä—É–≥–æ–µ –∏–º—è`,
          {
            reply_markup: {
              inline_keyboard: [[{ text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data: 'reg_skip_name' }]],
            },
          },
        )
        break

      case 3:
        this.bot.sendMessage(
          chatId,
          `–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ, ${info.name}, –º–µ–Ω—è –∑–æ–≤—É—Ç GPTBot.\n–û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å —Ç–∞—Ä–∏—Ñ–æ–º! –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –ø—Ä–æ–º–æ-–∫–æ–¥, —Ç–æ —Å–∫–æ—Ä–µ–µ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –º–Ω–µ. –ù–æ –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –µ—Å–ª–∏ —É —Ç–µ–±—è –µ–≥–æ –Ω–µ—Ç, —Ç—ã –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—å—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º —Ç–∞—Ä–∏—Ñ–æ–º –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å —Å–µ—Ä–≤–∏—Å–æ–º. –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –Ω–∞—Å—á—ë—Ç –ª–∏–º–∏—Ç–æ–≤, —Ç–µ–±–µ –∏—Ö —Ç–æ—á–Ω–æ —Ö–≤–∞—Ç–∏—Ç!`,
          {
            reply_markup: {
              inline_keyboard: [[{ text: '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ', callback_data: 'reg_tarif_welcome' }]],
            },
          },
        )
        break

      case 4:
        this.bot.sendMessage(
          chatId,
          error
            ? `–í–µ—Ä–Ω–æ –ª–∏ —É–∫–∞–∑–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ?
          \n–¢–µ–±—è –∑–æ–≤—É—Ç: ${info.name}
          \n–Ø–∑—ã–∫: ${info.language}
          \n${info.code === 'test_tarif' ? '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π —Ç–∞—Ä–∏—Ñ' : '–í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–º ' + info.code}`
            : `–°–ø–∞—Å–∏–±–æ!\n–ú—ã –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏! –û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –º—ã –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏, –¥–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º –µ—â—ë —Ä–∞–∑:
          \n–¢–µ–±—è –∑–æ–≤—É—Ç: ${info.name}
          \n–Ø–∑—ã–∫: ${info.language}
          \n${info.code === 'welcome' ? '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π —Ç–∞—Ä–∏—Ñ' : '–í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–º ' + info.code}`,
          {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [{ text: '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –µ—â—ë —Ä–∞–∑', callback_data: 'reg_start' }],
                [{ text: '–î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ!', callback_data: 'reg_confirm' }],
              ],
            },
          },
        )
        break

      case 5:
        await DBService.createUser(chatId, info)
        this.bot.sendMessage(chatId, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞!', {
          reply_markup: {
            inline_keyboard: [this.chatButton],
          },
        })
        break

      default:
        break
    }
  }

  /* CODE */
  async createCode(chatId: number) {
    const code = CacheService.getCode(chatId)

    switch (code.step) {
      case 1:
        await this.bot.sendMessage(chatId, '–í–≤–µ–¥–∏ –∫–æ–¥:')
        break

      case 2:
        await this.bot.sendMessage(chatId, '–£–∫–∞–∂–∏ –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è')
        break

      case 3:
        const buttons = await this.getTarifButtons('code_tarif_')

        await this.bot.sendMessage(chatId, `–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ`, {
          reply_markup: {
            inline_keyboard: buttons,
          },
        })
        break
      case 4:
        await this.bot.sendMessage(
          chatId,
          `–í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ?\n–¢–∞—Ä–∏—Ñ: ${code.tarifName} —Å –∞–π–¥–∏ ${code.tarifId}\n–ö–æ–¥: ${code.value}\n–õ–∏–º–∏—Ç :${code.limit}`,
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –µ—â—ë —Ä–∞–∑', callback_data: 'code_add_new' }],
                [{ text: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: 'code_confirm' }],
              ],
            },
          },
        )
        break
      case 5:
        await DBService.createCode(code)
        await this.bot.sendMessage(
          chatId,
          `–ö–æ–¥ ${code.value} –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ ${code.tarifName} —Å –ª–∏–º–∏—Ç–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ${code.limit} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!`,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: '–°–æ–∑–¥–∞—Ç—å –µ—â—ë –∫–æ–¥',
                    callback_data: 'code_add_new',
                  },
                ],
                [this.settingsButton],
              ],
            },
          },
        )
        break
    }
  }

  async activateCode(chatId: number, code: string) {
    const { user } = await CacheService.getUser(chatId)
    await DBService.activateCode(user.id, code)

    this.bot.sendMessage(chatId, `–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!`, {
      reply_markup: {
        inline_keyboard: [[this.settingsButton], this.chatButton],
      },
    })
  }

  /* GPT */
  async sendQuestion(chatId: number, text: string) {
    const { user } = await CacheService.getUser(chatId)

    if (!user.isAdmin) {
      /* VALIDATE ACCESS */
      const access = await DBService.validateAccess(user)

      if (!access.daily || !access.total || !access.validTarif) {
        await this.bot.sendMessage(
          chatId,
          access.validTarif
            ? `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ ${!access.daily ? '–¥–Ω–µ–≤–Ω–æ–π' : ''} ${
                !access.daily && !access.total ? '–∏' : ''
              }  ${!access.total ? '–æ–±—â–∏–π' : ''} –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.`
            : '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–∞—Ä–∏—Ñ –±–æ–ª–µ–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –Ω–æ –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è –¥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π!',
          {
            reply_markup: {
              inline_keyboard: [[this.tarifsButton], [this.settingsButton]],
            },
          },
        )

        return
      }
    }

    /* SEND TYPING ACTION */
    const stop = this.sendTyping(chatId)

    /* CREATE CONTEXT AND GET ANSVER FROM GPT */
    if (user.context?.useContext) {
      await DBService.createMessage(MessageRole.user, text, user)
    }

    const res = user.context?.useContext ? await GPTService.sendWithContext(chatId) : await GPTService.send(text, user)

    stop()

    /* SEND ANSVER */
    if (res) {
      if (user.context?.useContext) {
        await DBService.createMessage(MessageRole.assistant, res.message, user)
      }

      const activity =
        user.isAdmin || user.activity?.tarif.name === 'unlim'
          ? null
          : await DBService.updateActivity(user.id, res.tokens)

      const usage = `\n\n--- --- --- --- --- --- --- --- ---
      \n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${res.tokens} —Ç–æ–∫–µ–Ω–æ–≤. 
      \n–û—Å—Ç–∞–ª–æ—Å—å: —Å–µ–≥–æ–¥–Ω—è: ${activity ? user.activity?.tarif?.dailyLimit! - activity.dailyUsage : '‚àû'} / –≤—Å–µ–≥–æ: ${
        activity ? user.activity?.tarif?.totalLimit! - activity.totalUsage : '‚àû'
      }\n\n--- --- --- --- --- --- --- --- ---`

      await this.bot.sendMessage(chatId, res.message + usage, {
        parse_mode: validateMarkdown(res.message) ? 'Markdown' : undefined,
        reply_markup: {
          inline_keyboard: user.context?.useContext
            ? [this.contextButton(user.id)]
            : [[{ text: '–í–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç', callback_data: `toggle_context_${user.id}_on` }]],
        },
      })

      return true
    } else {
      await this.sendMessage(chatId, '–£–ø—Å... —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.')
      return false
    }
  }

  async clearContext(chatId: number, type: 'settings' | 'context') {
    await DBService.clearContext(chatId)
    const buttons: InlineKeyboardButton[][] = []

    if (type === 'settings') {
      buttons.push([this.settingsButton])
    }
    buttons.push(this.chatButton)

    this.bot.sendMessage(chatId, '–ö–æ–Ω—Ç–µ–∫—Å—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω!', {
      reply_markup: { inline_keyboard: buttons },
    })
  }

  /* TARIFS */
  async createTarif(chatId: number) {
    const tarif = CacheService.getTarif(chatId)
    const { prices } = CacheService.getPrice(chatId)
    switch (tarif.step) {
      case 1:
        await this.bot.sendMessage(chatId, '–ö–æ–¥–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞:')
        break

      case 2:
        await this.bot.sendMessage(chatId, '–¢–∏—Ç–ª–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞:')
        break

      case 3:
        await this.bot.sendMessage(chatId, '–û–ø–∏—Å–∞–Ω–∏–µ:')
        break

      case 4:
        await this.bot.sendMessage(chatId, '–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:')
        break

      case 5:
        await this.bot.sendMessage(chatId, '–û–±—â–∏–π –ª–∏–º–∏—Ç —Ç–∞—Ä–∏—Ñ–∞:')
        break

      case 6:
        await this.bot.sendMessage(chatId, '–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Ç–∞—Ä–∏—Ñ–∞:')
        break

      case 7:
        await this.bot.sendMessage(chatId, '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:')
        break

      case 8:
        await this.bot.sendMessage(chatId, '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞:', {
          reply_markup: {
            inline_keyboard: [
              [{ text: '1 –º–µ—Å—è—Ü', callback_data: 'tarif_duration_' + month }],
              [
                {
                  text: '1 –≥–æ–¥',
                  callback_data: 'tarif_duration_' + year,
                  pay: true,
                },
              ],
            ],
          },
        })
        break

      case 9:
        await this.bot.sendMessage(chatId, '–¢–∏–ø —Ç–∞—Ä–∏—Ñ–∞:', {
          reply_markup: {
            inline_keyboard: [
              [{ text: '–õ–∏–º–∏—Ç', callback_data: 'tarif_type_' + TarifType.limit }],
              [{ text: '–ü–æ–¥–ø–∏—Å–∫–∞', callback_data: 'tarif_type_' + TarifType.subscribe }],
            ],
          },
        })
        break

      case 10:
        await this.bot.sendMessage(chatId, '–í–∞–ª—é—Ç–∞:.', {
          reply_markup: {
            inline_keyboard: [
              [
                { text: Currency.rub, callback_data: 'tarif_currency_' + Currency.rub },
                { text: Currency.usd, callback_data: 'tarif_currency_' + Currency.usd },
                { text: Currency.btc, callback_data: 'tarif_currency_' + Currency.btc },
                { text: Currency.eth, callback_data: 'tarif_currency_' + Currency.eth },
                { text: Currency.usdt, callback_data: 'tarif_currency_' + Currency.usdt },
              ],
            ],
          },
        })
        break

      case 11:
        await this.bot.sendMessage(chatId, '–¶–µ–Ω–∞:', {})
        break

      case 12:
        const message = prices.reduce(
          (acc, el) => acc + el.value + ' ' + el.currency + '\n',
          `–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω–Ω–∏–∫–∏ –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ ${tarif.name}\n`,
        )

        await this.bot.sendMessage(chatId, message, {
          reply_markup: {
            inline_keyboard: [
              [{ text: '–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –ø—Ä–∞–π—Å', callback_data: 'tarif_add_price' }],
              [{ text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data: 'tarif_continue' }],
            ],
          },
        })
        break

      case 13:
        await this.bot.sendMessage(
          chatId,
          `–¢–∞—Ä–∏—Ñ ${tarif.name} / ${tarif.title} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!
          \n–û–ø–∏—Å–∞–Ω–∏–µ: ${tarif.description} 
          \n–õ–∏–º–∏—Ç—ã: ${tarif.limit} / ${tarif.dailyLimit} 
          \n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: ${tarif.maxContext} 
          \n–¢–∏–ø: ${tarif.type}  
          \n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${Math.floor(tarif.duration / day)}–¥–Ω–µ–π
          \n–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?`,
          {
            reply_markup: {
              inline_keyboard: [[{ text: '–°–æ–∑–¥–∞—Ç—å –µ—â—ë 1 —Ç–∞—Ä–∏—Ñ', callback_data: 'tarif_add_new' }, this.menuButton]],
            },
          },
        )
        break
    }
  }

  async sendTarifs(chatId: number) {
    const buttons = await this.getTarifButtons('settings_tarifs_')

    this.bot.sendMessage(chatId, '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã: ', {
      reply_markup: { inline_keyboard: [...buttons, [this.settingsButton]] },
    })
  }

  async sendTarifById(chatId: number, tarifId: number) {
    const tarif = await DBService.getTaridById(tarifId)

    const description = `${tarif.title}
    \n${tarif.description}
    \n --- --- --- --- --- --- ---
    \n–¢–∏–ø: ${tarif.type === 'limit' ? '–ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤' : '–ø–æ–¥–ø–∏—Å–∫–∞'}, ${timestampToDate(tarif.duration)}
    \n–õ–∏–º–∏—Ç—ã: –¥–Ω–µ–≤–Ω–æ–π ${tarif.dailyLimit === 0 ? '‚àû' : tarif.dailyLimit} / –æ–±—â–∏–π ${
      tarif.totalLimit === 0 ? '‚àû' : tarif.totalLimit
    }
    \n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: ${tarif.maxContext}`

    this.bot.sendMessage(chatId, description, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '–í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ: ' + tarif.title,
              callback_data: 'tarif_select_' + tarif.name + '_' + tarif.id,
            },
          ],
          [this.settingsButton],
        ],
      },
    })
  }

  async sendTarifPrices(chatId: number, tarifId: number) {
    const buttons = await this.getPriceButtons('tarif_buy_', tarifId)
    buttons.push(this.menuAndsettingSButtons)

    this.bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—ã–π –¥–ª—è —Ç–µ–±—è —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã', {
      reply_markup: {
        inline_keyboard: buttons,
      },
    })
  }

  async sendTarifBuy(chatId: number, priceId: number) {
    this.bot.sendMessage(
      chatId,
      '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–æ–±—Ä–µ—Ç–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤, –Ω–æ –Ω–∞–¥ —ç—Ç–∏–º –≤–µ–¥—É—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã :( –û—Ç—Ä–∞—Ç–∏—Ç–µ—Å—å –∫–æ –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–æ-–∫–æ–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞',
      {
        reply_markup: { inline_keyboard: [this.contactMeButton, this.menuAndsettingSButtons] },
      },
    )
  }

  async sendMyTarif(chatId: number) {
    const { user } = await CacheService.getUser(chatId)
    // const user = await DBService.getByChatId(chatId)

    const description = `–ú–æ–π —Ç–∞—Ä–∏—Ñ ${user?.activity?.tarif.title}
    \n–û–±—â–∏–π –ª–∏–º–∏—Ç ${user?.activity?.tarif.totalLimit} / –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π ${user?.activity?.tarif.dailyLimit}
    \n–û—Å—Ç–∞–ª–æ—Å—å ${user?.activity?.tarif.totalLimit! - user?.activity?.totalUsage!} / ${
      user?.activity?.tarif.dailyLimit! - user?.activity?.dailyUsage!
    }
    \n–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è ${user?.activity?.expiresIn.toLocaleDateString()}`

    this.bot.sendMessage(chatId, description, {
      reply_markup: {
        inline_keyboard: [[this.tarifsButton, this.settingsButton], this.chatButton],
      },
    })
  }

  /* SETTINGS */
  async settings(chatId: number) {
    const { user } = await CacheService.getUser(chatId)

    const buttons = [
      [{ text: '–†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä', callback_data: 'settings_random_' + user.id }],
      [
        { text: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤', callback_data: 'settings_service_info' },
        {
          text: user.context?.useServiceInfo ? '–û—Ç–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å',
          callback_data: `toggle_service_info_${user.id}_${user.context?.useServiceInfo ? 'off' : 'on'}`,
        },
      ],
      [
        {
          text: '–ö–æ–Ω—Ç–µ–∫—Å—Ç',
          callback_data: 'context_change_length_' + user.id + '_' + user.activity?.tarif.maxContext,
        },
        {
          text: user.context?.useContext ? '–û—Ç–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å',
          callback_data: `toggle_context_${user.id}_${user.context?.useContext ? 'off' : 'on'}`,
        },
      ],
      [
        { text: '–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', callback_data: 'settings_name_' + user.name },
        { text: '–Ø–∑—ã–∫', callback_data: 'settings_lang_' + user.id },
      ],
      [this.tarifsButton, { text: '–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', callback_data: 'tarifs_send_code' }],
      [
        { text: '–í–µ—Ä—Å–∏—è GPT', callback_data: 'show_version' },
        { text: '–ú–æ–∏ –ª–∏–º–∏—Ç—ã', callback_data: 'show_limits' },
      ],
      this.chatButton,
    ]

    this.bot.sendMessage(chatId, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', {
      reply_markup: {
        inline_keyboard: buttons,
      },
    })
  }

  async settingsError(chatId: number) {
    const buttons = [[this.settingsButton], this.chatButton]
    this.bot.sendMessage(chatId, '–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã. –í—ã–±–µ—Ä–∏ –æ–¥–Ω–æ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π', {
      reply_markup: {
        inline_keyboard: buttons,
      },
    })
  }

  async sendLanguages(chatId: number, userId: number) {
    this.bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏ —è–∑—ã–∫: ', {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '–†—É—Å—Å–∫–∏–π üá∑üá∫', callback_data: 'toggle_language_' + userId + '_' + Language.ru },
            { text: 'English üá¨üáß', callback_data: 'toggle_language_' + userId + '_' + Language.en },
          ],
          [this.settingsButton],
        ],
      },
    })
  }

  async sendNameChoice(chatId: number, oldName: string) {
    this.bot.sendMessage(chatId, `–ü—Ä–∏—à–ª–∏ –º–Ω–µ –Ω–æ–≤–æ–µ –∏–º—è`, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: `–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ (${oldName}) –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ`,
              callback_data: `show_settings`,
            },
          ],
        ],
      },
    })
  }

  async changeName(chatId: number, name: string) {
    const { user } = await CacheService.getUser(chatId)

    await DBService.changeName(name, user)
    this.bot.sendMessage(chatId, '–ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ' + name, {
      reply_markup: {
        inline_keyboard: [[this.settingsButton], this.chatButton],
      },
    })
  }

  async sendCodeInput(chatId: number) {
    this.bot.sendMessage(chatId, `–ü—Ä–∏—à–ª–∏ –º–Ω–µ –∫–æ–¥`, {
      reply_markup: {
        inline_keyboard: [[this.settingsButton]],
      },
    })
  }

  async sendContextLengthChoise(chatId: number, max: number, userId: number) {
    this.bot.sendMessage(chatId, `–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∂–µ–ª–∞–µ–º—É—é –¥–ª–∏–Ω–Ω—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –ù–æ –Ω–µ –±–æ–ª–µ–µ ${max}`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: `–ú–∞–∫—Å–∏–º—É–º (${max})`, callback_data: `context_length_` + userId + '_' + max }],
          [this.settingsButton],
        ],
      },
    })
  }

  async contextLengthError(chatId: number, max: number, userId: number) {
    this.bot.sendMessage(
      chatId,
      `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${max}`,
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: `–ú–∞–∫—Å–∏–º—É–º (${max})`, callback_data: `context_length_` + userId + '_' + max }],
            [this.settingsButton],
          ],
        },
      },
    )
  }

  async changeContextLength(chatId: number, value: number, userId: number) {
    await DBService.changeContext(value, userId)
    this.bot.sendMessage(
      chatId,
      `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –∏ —Ç–µ–ø–µ—Ä—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${value} —Å–æ–æ–±—â–µ–Ω–∏–π`,
      {
        reply_markup: {
          inline_keyboard: [[this.settingsButton], this.chatButton],
        },
      },
    )
  }

  async sendRandomModels(chatId: number, userId: number) {
    this.bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏.', {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'Temperature', callback_data: 'settings_random_model_temperature_' + userId },
            { text: 'Top_p', callback_data: 'settings_random_model_topP_' + userId },
            { text: '–û–±–µ —Å—Ä–∞–∑—É', callback_data: 'settings_random_model_both_' + userId },
          ],
          [this.settingsButton],
        ],
      },
    })
  }

  async sendRandomValues(chatId: number, model: RandomModels, userId: number) {
    this.bot.sendMessage(chatId, `–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –æ–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è ${model}`, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '0.5',
              callback_data: 'settings_random_value_' + model + '_0.5_' + userId,
            },
            {
              text: '0.7(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)',
              callback_data: 'settings_random_value_' + model + '_0.7_' + userId,
            },
          ],
          [
            {
              text: '0.9',
              callback_data: 'settings_random_value_' + model + '_0.9_' + userId,
            },
            {
              text: '1',
              callback_data: 'settings_random_value_' + model + '_1_' + userId,
            },
            {
              text: '1.1',
              callback_data: 'settings_random_value_' + model + '_1.1_' + userId,
            },
            {
              text: '1.25',
              callback_data: 'settings_random_value_' + model + '_1.25_' + userId,
            },
            {
              text: '1.5',
              callback_data: 'settings_random_value_' + model + '_1.5_' + userId,
            },
          ],
          [this.settingsButton],
        ],
      },
    })
  }

  async changeRandomModel(chatId: number, userId: number, models: IRandomModel) {
    await DBService.changeRandomModel(models, userId)
    this.bot.sendMessage(
      chatId,
      models.model === 'both'
        ? `–û–±–µ –º–æ–¥–µ–ª–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã.\nTemperature: ${models.temperature} \nTop_p: ${models.topP}`
        : `–ú–æ–¥–µ–ª—å –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${models.model}\n–£—Ä–æ–≤–µ–Ω—å —Ä–∞–Ω–¥–æ–º–Ω–æ—Å—Ç–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ ${models.value}`,
      {
        reply_markup: {
          inline_keyboard: [[this.settingsButton], this.chatButton],
        },
      },
    )
  }

  async sendQueryInput(chatId: number) {
    const user = await DBService.getByChatId(chatId)
    const serviceInfo = `–£–∫–∞–∂–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤.\n–û–Ω–∏ –±—É–¥—É—Ç –∫–∞–∂–¥—ã–π —Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤–º–µ—Å—Ç–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –Ω–∞ –Ω–∏—Ö –æ—Ç–≤–µ—á–∞—Ç—å, –Ω–æ —É—á—Ç—ë—Ç –∏—Ö –ø—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.
    ${user?.context?.serviceInfo ? '\n–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: ' + user.context.serviceInfo : ''}`

    await this.bot.sendMessage(chatId, serviceInfo, {
      reply_markup: { inline_keyboard: [[this.settingsButton]] },
    })
  }

  async changeQuery(chatId: number, query: string) {
    const { user } = await CacheService.getUser(chatId)

    await DBService.changeQuery(query, user)
    this.bot.sendMessage(chatId, '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã', {
      reply_markup: { inline_keyboard: [[this.settingsButton], this.chatButton] },
    })
  }

  async sendVersion(chatId: number) {
    this.bot.sendMessage(
      chatId,
      '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–µ—Ä—Å–∏—è ***gpt-3.5-turbo***, –∫–∞–∫ —Ç–æ–ª—å–∫–æ 4—è –≤–µ—Ä—Å–∏—è —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π, —è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–± —ç—Ç–æ–º —Å–æ–æ–±—â—É.',
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [[this.settingsButton], this.chatButton],
        },
      },
    )
  }

  /* TOGGLE */
  async languageToggle(chatId: number, id: number, lang: Language) {
    await DBService.languageToggle(id, lang)
    this.bot.sendMessage(chatId, `–Ø–∑—ã–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${lang === 'ru' ? '—Ä—É—Å—Å–∫–∏–π' : '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π'}`, {
      reply_markup: {
        inline_keyboard: [[this.settingsButton]],
      },
    })
  }

  async contextToggle(chatId: number, userId: number, action: string, settings: boolean) {
    await DBService.contextToggle(userId, action)

    const buttons: InlineKeyboardButton[][] =
      action === 'on'
        ? [this.contextButton(userId)]
        : [[{ text: '–í–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç', callback_data: `toggle_context_${userId}_on` }]]

    if (settings) {
      buttons.push([this.settingsButton])
    }

    buttons.push(this.chatButton)

    this.bot.sendMessage(chatId, `–ö–æ–Ω—Ç–µ–∫—Å—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ ${action === 'on' ? '–≤–∫–ª—é—á–µ–Ω' : '–æ—Ç–∫–ª—é—á–µ–Ω'}`, {
      reply_markup: {
        inline_keyboard: buttons,
      },
    })
  }

  async serviceInfoToggle(chatId: number, userId: number, action: string) {
    await DBService.serviceInfoToggle(userId, action)

    const buttons: InlineKeyboardButton[][] = [
      [
        {
          text: action === 'on' ? '–û—Ç–∫–ª—é—á–∏—Ç—å ' : '–í–∫–ª—é—á–∏—Ç—å',
          callback_data: `toggle_service_info_${userId}_${action === 'on' ? 'off' : 'on'}`,
        },
      ],
      [this.settingsButton],
      this.chatButton,
    ]

    this.bot.sendMessage(chatId, `–°–µ—Ä–≤–∏—Å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ${action === 'on' ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}`, {
      reply_markup: {
        inline_keyboard: buttons,
      },
    })
  }
}

export default new TgService()
